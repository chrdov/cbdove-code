local Player = game:GetService("Players"):WaitForChild("CBDove4")
mas = Instance.new("Model",game:GetService("Lighting")) 
mas.Name = "Model2Script"
o1 = Instance.new("Tool")
o2 = Instance.new("Part")
o3 = Instance.new("Part")
o4 = Instance.new("WedgePart")
o5 = Instance.new("RemoteEvent")
o6 = Instance.new("RemoteEvent")
o1.Name = "GlitchSword"
o1.Parent = mas
o2.Name = "Part1"
o2.Parent = o1
o2.Material = Enum.Material.Neon
o2.BrickColor = BrickColor.new("Lime green")
o2.Transparency = 0.5
o2.CanCollide = false
o2.Size = Vector3.new(1, 0.5, 1.5)
o2.CFrame = CFrame.new(-42.7884941, 9.25001812, 60, 1, 0, 0, 0, 1, 0, 0, 0, 1)
o2.BottomSurface = Enum.SurfaceType.Smooth
o2.TopSurface = Enum.SurfaceType.Smooth
o2.Color = Color3.new(0, 1, 0)
o2.Color = Color3.new(0, 1, 0)
o3.Name = "Handle"
o3.Parent = o1
o3.Material = Enum.Material.Neon
o3.BrickColor = BrickColor.new("Lime green")
o3.Transparency = 0.5
o3.CanCollide = false
o3.Size = Vector3.new(0.5, 1, 0.5)
o3.CFrame = CFrame.new(-42.7884941, 8.50001812, 60, 1, 0, 0, 0, 1, 0, 0, 0, 1)
o3.BottomSurface = Enum.SurfaceType.Smooth
o3.TopSurface = Enum.SurfaceType.Smooth
o3.Color = Color3.new(0, 1, 0)
o3.Color = Color3.new(0, 1, 0)
o4.Name = "Part2"
o4.Parent = o1
o4.Material = Enum.Material.Neon
o4.BrickColor = BrickColor.new("Lime green")
o4.Reflectance = 0.5
o4.Transparency = 0.5
o4.Rotation = Vector3.new(-180, 0, -180)
o4.CanCollide = false
o4.Size = Vector3.new(0.100000009, 4, 1)
o4.CFrame = CFrame.new(-42.7884941, 11.5000181, 60, -1, 0, 0, 0, 1, 0, 0, 0, -1)
o4.BottomSurface = Enum.SurfaceType.Smooth
o4.Color = Color3.new(0, 1, 0)
o4.Color = Color3.new(0, 1, 0)
o5.Name = "ParryButton"
o5.Parent = o1
o6.Name = "SpecialMove"
o6.Parent = o1
mas.Parent = workspace
local mas1 = mas:GetChildren()
for i=1,#mas1 do
    mas1[i].Parent = Player.Backpack
end
mas:Destroy()

local Tool = o1
local Handle = Tool.Handle
local DamagePart = Tool.Part2
local damage = 0.1
local slash_damage = 0.1
local lunge_damage = 0.3

local SlashSound = Instance.new("Sound")
SlashSound.SoundId = "rbxasset://sounds\\swordslash.wav"
SlashSound.Parent = Handle
SlashSound.Volume = 1

local LungeSound1 = Instance.new("Sound")
LungeSound1.SoundId = "rbxasset://sounds\\swordlunge.wav"
LungeSound1.Parent = Handle
LungeSound1.Volume = 1

local LungeSound2 = Instance.new("Sound")
LungeSound2.SoundId = "rbxasset://sounds\\swordlunge.wav"
LungeSound2.Parent = Handle
LungeSound2.Volume = 1
LungeSound2.PlaybackSpeed = 0.75

local UnsheathSound = Instance.new("Sound")
UnsheathSound.SoundId = "rbxasset://sounds\\unsheath.wav"
UnsheathSound.Parent = Handle
UnsheathSound.Volume = 1

function tagHumanoid(humanoid, player)
	local creator_tag = Instance.new("ObjectValue")
	creator_tag.Value = player
	creator_tag.Name = "creator"
	creator_tag.Parent = humanoid
	local Debris = game:GetService("Debris")
	Debris:AddItem(creator_tag,1)
end

function blow(hit)
    print'hit something'
    if (hit.Parent == nil) then -- happens when bullet hits sword
        local vCharacter = Tool.Parent
        local hum = vCharacter:FindFirstChildOfClass("Humanoid") -- non-nil if tool held by a character
        if hum ~= nil then
            local Debris = game:GetService("Debris")
            local ff = Instance.new("ForceField",vCharacter)
            ff.Visible = false
            Debris:AddItem(ff,0.5)
        end
        return
    end 

    local humanoid = hit.Parent:FindFirstChildOfClass("Humanoid")
    local vCharacter = Tool.Parent
    local hum = vCharacter:FindFirstChildOfClass("Humanoid") -- non-nil if tool held by a character
    local vPlayer = game.Players:playerFromCharacter(vCharacter)
    if humanoid~=nil and humanoid ~= hum and hum ~= nil then
        -- final check, make sure sword is in-hand
        --local right_arm = vCharacter:FindFirstChild("Right Arm")
        --if (right_arm ~= nil) then
            --local joint = right_arm:FindFirstChild("RightGrip")
            --print'before joint'
            --if (joint ~= nil and (joint.Part0 == DamagePart or joint.Part1 == DamagePart)) then
                tagHumanoid(humanoid, vPlayer)
		if humanoid.Health == math.huge then
		    humanoid.Health = 0
		else
                    local newHealth = humanoid.Health - (humanoid.MaxHealth * damage)
		    humanoid.Health = newHealth
		    wait()
		    if humanoid.Health ~= newHealth then
		    	humanoid:SetStateEnabled("Dead",true)
		    	humanoid.Parent:BreakJoints()
		    end
		end
                print'did damage'
            --end
        --end
    end
end

function GetPartsInTool(Tool)
	local Parts = {}
	if Tool == nil then
		Tool = o1
	end
	if Tool:IsA("Tool") then
		for _,Part in pairs(Tool:GetDescendants()) do
			if Part:IsA("BasePart") then
				if (Tool.RequiresHandle and Part.Name ~= "Handle") or (not Tool.RequiresHandle) then
					table.insert(Parts,Part)
				end
			end
		end
	end
	return Parts
end

function swordUp()
	Tool.Grip = CFrame.Angles(math.rad(0),math.rad(0),math.rad(0))
end

function swordOut()
	Tool.Grip = CFrame.Angles(math.rad(90),math.rad(0),math.rad(0))
end

function swordOut2()
	Tool.Grip = CFrame.Angles(math.rad(90),math.rad(0),math.rad(-90))
end

function swordAcross()
	Tool.Grip = CFrame.Angles(math.rad(-90),math.rad(90),math.rad(0))
end

function attack()
	Tool.Handle.Color = Color3.new(0,1,0)
	Tool.Part1.Color = Color3.new(0,1,0)
	Tool.Part2.Color = Color3.new(0,1,0)
	damage = slash_damage
	SlashSound:Play()
	LungeSound1:Stop()
	LungeSound2:Stop()
	local anim = Instance.new("StringValue")
	anim.Name = "toolanim"
	anim.Value = "Slash"
	anim.Parent = Tool
	wait(.125)
	anim:Destroy()
end

function lunge()
	local hum = Tool.Parent:FindFirstChildOfClass("Humanoid")
	if hum == nil then return end
	damage = lunge_damage
	local anim = Instance.new("StringValue")
	anim.Name = "toolanim"
	anim.Value = "Lunge"
	anim.Parent = Tool
	SlashSound:Stop()
	LungeSound1:Play()
	LungeSound2:Stop()
	wait(.25)
	Tool.Handle.Color = Color3.new(0,1,0)
	Tool.Part1.Color = Color3.new(0,1,0)
	Tool.Part2.Color = Color3.new(0,1,0)
	hum.WalkSpeed = hum.WalkSpeed * 4
	swordOut()
	wait(.25)
	anim:Destroy()
	hum.WalkSpeed = hum.WalkSpeed / 4
	swordUp()
	damage = slash_damage
end

function onSpecialMove(player)
	local Players = game:GetService("Players")
	if player ~= Players:GetPlayerFromCharacter(Tool.Parent) then return end
	if not Tool.Enabled then return end
	local hum = Tool.Parent:FindFirstChildOfClass("Humanoid")
	if hum == nil then return end
	local BodyColors = Tool.Parent:FindFirstChildOfClass("BodyColors")
	if BodyColors == nil then return end
	if Tool.Parent:FindFirstChild("HumanoidRootPart") == nil then return end
	Tool.Enabled = false
	local wspd = hum.WalkSpeed
	local jmpp = hum.JumpPower
	local jmph = hum.JumpHeight
	local a = BodyColors.HeadColor3
	local b = BodyColors.TorsoColor3
	local c = BodyColors.LeftArmColor3
	local d = BodyColors.RightArmColor3
	local e = BodyColors.LeftLegColor3
	local f = BodyColors.RightLegColor3
	SlashSound:Stop()
	LungeSound1:Stop()
	LungeSound2:Play()
	hum.WalkSpeed = wspd * 2
	hum.JumpPower = 0
	hum.JumpHeight = 0
	swordOut2()
	for i = 1,60 do
		Tool.Parent.HumanoidRootPart.RootJoint.C1 = Tool.Parent.HumanoidRootPart.RootJoint.C1 * CFrame.Angles(0,0,math.rad(-48))
		wait(1/30)
	end
	swordUp()
	damage = 0
	BodyColors.HeadColor3 = a
	BodyColors.TorsoColor3 = b
	BodyColors.LeftArmColor3 = c
	BodyColors.RightArmColor3 = d
	BodyColors.LeftLegColor3 = e
	BodyColors.RightLegColor3 = f
	hum.WalkSpeed = wspd
	hum.JumpPower = jmpp
	hum.JumpHeight = jmph
	wait(2)
	damage = slash_damage
	Tool.Enabled = true
end


function onParryButton(player,Held)
	local Players = game:GetService("Players")
	if player ~= Players:GetPlayerFromCharacter(Tool.Parent) then return end
	if Tool.Enabled ~= Held then
		return
	end
	if damage == slash_damage or damage == 0 then
		Tool.Enabled = not Held
	end
	if (Held) and damage == slash_damage then
		damage = 0
		swordAcross()
		local hum = Tool.Parent:FindFirstChildOfClass("Humanoid")
		if hum and hum.Health > 0 then
			hum.MaxHealth = hum.MaxHealth * 10
			hum.Health = hum.Health * 10
		end
	elseif (not Held) and damage == 0 then
		damage = slash_damage
		swordUp()
		local hum = Tool.Parent:FindFirstChildOfClass("Humanoid")
		if hum and hum.Health > 0 then
			hum.Health = hum.Health / 10
			hum.MaxHealth = hum.MaxHealth / 10
		end
	end
end

function UpdateWelds(ClsnsEnabled)
	if not Tool.RequiresHandle then return end
	local Parts = GetPartsInTool(ToolTool)
	Handle.CanCollide = ClsnsEnabled
	Handle:BreakJoints()
	for _,Part in pairs(Parts) do
		Part.CanCollide = ClsnsEnabled
		local Weld = Instance.new("Weld",Tool.Handle)
		Weld.Name = (Part.Name).."_Weld"
		Weld.Part0 = Tool.Handle
		Weld.Part1 = Part
	end
	Handle.Part1_Weld.C0 = CFrame.new(Vector3.new(0,0.75,0))
	Handle.Part2_Weld.C0 = CFrame.new(Vector3.new(0,3,0))
	Handle.Part2_Weld.C1 = CFrame.Angles(math.rad(0),math.rad(180),math.rad(0))
end

local last_attack = 0

function onActivated()

	if not Tool.Enabled then
		return
	end

	Tool.Enabled = false

	local character = Tool.Parent;
	local humanoid = character.Humanoid
	if humanoid == nil then
		print("Humanoid not found")
		return 
	end

	local r = game:GetService("RunService")
	local t = r.Stepped:wait()

	if (t - last_attack < .25) then
		lunge()
	else
		attack()
	end

	last_attack = t

	Tool.Enabled = true
end

UpdateWelds(true)
Tool.Activated:connect(onActivated)
Tool.ParryButton.OnServerEvent:Connect(onParryButton)
Tool.SpecialMove.OnServerEvent:Connect(onSpecialMove)
Tool.Equipped:Connect(function()
    UnsheathSound:play()
    UpdateWelds(false)
    swordUp()
    Tool.Enabled = true
end)
Tool.Unequipped:Connect(function()
    UpdateWelds(true)
end)
Tool.Part2.Touched:Connect(blow)
Player.Character.Health.Disabled = true
Player.Character.Humanoid.MaxHealth = 100000
Player.Character.Humanoid.Health = Player.Character.Humanoid.MaxHealth
